DECLARE acId_val INT;
DECLARE apId_val INT;
DECLARE itId_val INT;
DECLARE rId_val INT;
DECLARE fId_val INT;
DECLARE alName varchar(2);
DECLARE acName varchar(16);
DECLARE apName varchar(3);
-- Check if airport, aircraft, and airline parameters exist in DB
-- If not, insert their values into their corresponding lookup table
BEGIN
IF EXISTS (SELECT * FROM Airport
WHERE name = depAirport) THEN
SELECT apId INTO apId_val
FROM Airport
WHERE name = depAirport;
END IF;
END;
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
-- If airport does not exist, insert a new airport into Airport table
BEGIN
IF apId_val = NULL THEN
INSERT INTO Airport (name)
VALUES (depAirport);
END IF;
END;
COMMIT;
END;
BEGIN
IF EXISTS (SELECT * FROM Aircraft
WHERE name = aircraft) THEN
SELECT acId INTO acId_val
FROM Aircraft
WHERE name = aircraft;
END IF;
END;
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
-- If aircraft does not exist, insert a new aircraft into Aircraft table
BEGIN
IF acId_val = NULL THEN
INSERT INTO Aircraft (name)
VALUES (aircraft);
END IF;
END;
COMMIT;
END;
BEGIN
IF EXISTS (SELECT * FROM Airline
WHERE name = airline) THEN
SELECT apId INTO alId_val
FROM Airline
WHERE name = airline;
END IF;
END;
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
-- If airline does not exist, insert a new airline into Airline table
BEGIN
IF alId_val = NULL THEN
INSERT INTO Airline (name)
VALUES (airline);
END IF;
END;
COMMIT;
END;
-- Retrieve corresponding Id values from lookup tables
SELECT alId, name INTO alId_val, alName
FROM Airline WHERE name = airline;
SELECT acId, name INTO acId_val, acName
FROM Aircraft WHERE name = aircraft;
SELECT apId, name INTO apId_val, apName
FROM Airport WHERE name = depAirport;
SELECT itId INTO itId_val FROM IncidentType WHERE name = incidentType;
SELECT rId INTO rId_val FROM Reporter WHERE name = reportedBy;
-- Check to see if flight already exists in Flight table
BEGIN
IF EXISTS (SELECT * FROM Flight f
WHERE f.flightNum = flightNumber AND
f.flightDate = flightDate AND
f.delay = delay AND
alName = airline AND
acName = aircraft AND
apName = depAirport
) THEN
SELECT fId INTO fId_val
FROM Flight f
WHERE f.flightNum = flightNumber AND
f.flightDate = flightDate AND
f.delay = delay AND
alName = airline AND
acName = aircraft AND
apName = depAirport;
END IF;
END;
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
-- If flight does not exist, insert a new flight into Flight table
BEGIN
IF fId_val = NULL THEN
INSERT INTO Flight (alId, acId, apId, flightNum, flightDate, delay)
VALUES (alId_val, acId_val, apId_val, flightNumber, flightDate, delay);
END IF;
END;
COMMIT;
END;
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
-- Retrieve newly inserted flight Id
SELECT fId INTO fId_val FROM Flight f
WHERE f.flightNum = flightNumber AND
f.flightDate = date AND
f.delay = delay AND
f.alId = alId_val AND
f.acId = acId_val AND
f.apId = apId_val;
-- Use retrieved values to insert new incident
INSERT INTO Incident (iid, fId, itId, rId, severity, injuries)
VALUES (iid, fId_val, itId_val, rId_val, severity, injuries);
COMMIT;
END;
END;
")
# Test Stored Procedures
test_sp_storeIncident <- function() {
# query parameters
in_iid <- "i19043"
in_date <- as.Date("2025-08-17")
in_al <- "UA"
in_flightNum <- 9876
in_ap <- "JFK"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "737-800"
query <- glue::glue_sql("CALL storeIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, testQuery)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
after_insert[nrow(after_insert),]
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
message("FAIL: Unable to execute stored procedure to completion")
})
# CASE: fail to insert a duplicate Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Flight")
dbSendQuery(dbcon, testQuery)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Flight")
if (nrow(before_insert) == nrow(after_insert)) {
message("PASS: No duplicate Incident inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
}
test_sp_storeNewIncident <- function() {
# query parameters
in_iid <- "i19044"
in_date <- as.Date("2025-08-17")
in_al <- "MM"
in_flightNum <- 9999
in_ap <- "MMM"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "M737-900"
query <- glue::glue_sql("CALL storeNewIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
res <- dbSendQuery(dbcon, testQuery)
dbHasCompleted(res)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
})
# CASE: fail to insert a duplicate Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, testQuery)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) == nrow(after_insert)) {
message("PASS: No duplicate Incident inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
}
storeNewIncident()
test_sp_storeNewIncident()
res <- dbSendQuery(dbcon, testQuery)
# Test Stored Procedures
test_sp_storeIncident <- function() {
# query parameters
in_iid <- "i19043"
in_date <- as.Date("2025-08-17")
in_al <- "UA"
in_flightNum <- 9876
in_ap <- "JFK"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "737-800"
query <- glue::glue_sql("CALL storeIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
after_insert[nrow(after_insert),]
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
message("FAIL: Unable to execute stored procedure to completion")
})
# CASE: fail to insert a duplicate Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Flight")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Flight")
if (nrow(before_insert) == nrow(after_insert)) {
message("PASS: No duplicate Incident inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
}
test_sp_storeNewIncident <- function() {
# query parameters
in_iid <- "i19044"
in_date <- as.Date("2025-08-17")
in_al <- "MM"
in_flightNum <- 9999
in_ap <- "MMM"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "M737-900"
query <- glue::glue_sql("CALL storeNewIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
res <- dbSendQuery(dbcon, query)
dbHasCompleted(res)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
})
# CASE: fail to insert a duplicate Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) == nrow(after_insert)) {
message("PASS: No duplicate Incident inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
}
test_sp_storeNewIncident()
# query parameters
in_iid <- "i19044"
in_date <- as.Date("2025-08-17")
in_al <- "MM"
in_flightNum <- 9999
in_ap <- "MMM"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "M737-900"
query <- glue::glue_sql("CALL storeNewIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
res <- dbSendQuery(dbcon, query)
dbHasCompleted(res)
test_sp_storeIncident()
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
})
# Test Stored Procedures
test_sp_storeIncident <- function() {
# query parameters
in_iid <- "i19043"
in_date <- as.Date("2025-08-17")
in_al <- "UA"
in_flightNum <- 9876
in_ap <- "JFK"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "737-800"
query <- glue::glue_sql("CALL storeIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
after_insert[nrow(after_insert),]
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
message("FAIL: Unable to execute stored procedure to completion")
})
# CASE: fail to insert a duplicate Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Flight")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Flight")
if (nrow(before_insert) == nrow(after_insert)) {
message("PASS: No duplicate Incident inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
}
test_sp_storeNewIncident <- function() {
# query parameters
in_iid <- "i19044"
in_date <- as.Date("2025-08-17")
in_al <- "MM"
in_flightNum <- 9999
in_ap <- "MMM"
in_it <- "crew"
in_severity <- "minor"
in_delay <- 25
in_injuries <- 0
in_reportedBy <- "crew"
in_ac <- "M737-900"
query <- glue::glue_sql("CALL storeNewIncident(
{in_iid}, {in_date}, {in_al}, {in_flightNum},
{in_ap}, {in_it}, {in_severity}, {in_delay},
{in_injuries}, {in_reportedBy}, {in_ac}
)", .con=dbcon)
# CASE: successfully insert a new Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) + 1 == nrow(after_insert)) {
message("PASS: Incident succesfully inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
# CASE: fail to insert a duplicate Incident
try({
before_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
dbSendQuery(dbcon, query)
after_insert <- dbGetQuery(dbcon, "SELECT * FROM Incident")
if (nrow(before_insert) == nrow(after_insert)) {
message("PASS: No duplicate Incident inserted")
}
}, error = function(e) {
message("FAIL: Unable to executed stored procedure to completion")
})
}
test_sp_storeIncident()
test_sp_storeNewIncident()
# Run Script
source("configBusinessLogic.PractI.ChuaM.R", local=knitr::knit_global())
# Run Tests and Display Results
test_sp_storeIncident()
# Run Script
source("configBusinessLogic.PractI.ChuaM.R", local=knitr::knit_global())
# Note: Stored Procedures compile, but do not pass tests
# Run Tests and Display Results
# test_sp_storeIncident()
# test_sp_storeNewIncident()
# Delete DB + Disconnect
source("deleteDB.PractI.ChuaM.R")
library(kableExtra)
library(knitr)
# Create DB & Establish DB Connection
source("createDB.PractI.ChuaM.R", local=knitr::knit_global())
# Load CSV Data into DB
source("loadDB.PractI.ChuaM.R", local=knitr::knit_global())
# Compare DB Data to Original CSV File
source("testDBLoading.PractI.ChuaM.R", local=knitr::knit_global())
# Run Tests and Display Results
test_num_rows()
test_dates_match()
test_unq_values()
test_avg_flight_delay()
# Run Script
source("configBusinessLogic.PractI.ChuaM.R", local=knitr::knit_global())
# Note: Stored Procedures compile, but do not pass tests
# Run Tests and Display Results
# test_sp_storeIncident()
# test_sp_storeNewIncident()
# reshape the table, so that we can have months as one column and the other
# columns as the incident count per month by incident type (4)
reshapedTable <- reshape(
data = incidentsByMonthAndType,
timevar = "name",
idvar = "month",
new.row.names = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November",
"December"),
direction = "wide"
)
# create a new dataframe and format the table for display
formatted_incidentsTypeMonth <- data.frame(
month = month.abb[reshapedTable$month],
medical = reshapedTable$Incident_Count.medical,
weather = reshapedTable$Incident_Count.weather,
security = reshapedTable$Incident_Count.security,
faa = reshapedTable$Incident_Count.faa,
crew = reshapedTable$Incident_Count.crew,
mechanical = reshapedTable$Incident_Count.turbulence,
wildlife = reshapedTable$Incident_Count.wildlife,
tsa = reshapedTable$Incident_Count.TSA
)
# replace all NA values in the table with 0
formatted_incidentsTypeMonth[is.na(formatted_incidentsTypeMonth)] <- 0
formatted_incidentsTypeMonth
incidentsTable <- kable(formatted_incidentsTypeMonth, format="html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
incidentsTable
airlineData <- dbGetQuery(dbcon, "SELECT * FROM AirlineIncidentData")
kable(airlineData, format="html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
incidentsByYear <- dbGetQuery(dbcon, "SELECT * FROM IncidentsByYearData")
# set vectors to their corresponding axis and determine limits
x <- incidentsByYear$Years
y <- incidentsByYear$Total_Incidents
lower_limit_x <- x[1]
upper_limit_x <- x[length(x)]
lower_limit_y <- min(y)
upper_limit_y <- max(y)
# plot scatterplot with titles and formatted labels
fig <- plot(x, y, main="Incidents Trend By Year",
xlab="Year", ylab="Number of Incidents",
xlim=c(lower_limit_x, upper_limit_x),
ylim=c(lower_limit_y, upper_limit_y))
axis(side = 1, at = x, labels = x)
axis(side = 1, at = y, labels = y)
# Delete DB + Disconnect
source("deleteDB.PractI.ChuaM.R")
